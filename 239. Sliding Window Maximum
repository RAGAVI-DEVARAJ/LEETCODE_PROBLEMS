vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    vector<int> ans;      // Result vector to store maximums
    deque<int> dq;        // Deque to store indices of elements in the current window

    int n = nums.size();  // Size of the input array

    for(int i = 0; i < n; i++) {
        // Remove the front element of the deque if it's outside the current window
        if (!dq.empty() && dq.front() == i - k)
            dq.pop_front();

        // Remove elements from the back of the deque if they are smaller than the current element
        while (!dq.empty() && nums[dq.back()] <= nums[i])
            dq.pop_back();

        // Add the current index to the deque
        dq.push_back(i);

        // If the current index is greater than or equal to k-1, add the maximum of the current window to the result vector
        if (i >= k - 1)
            ans.push_back(nums[dq.front()]);
    }

    return ans;
}
